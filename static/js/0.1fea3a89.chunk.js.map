{"version":3,"file":"static/js/0.1fea3a89.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Spinner/Spinner.jsx","components/Contacts/ContactsForm/ContactForm.jsx","components/Contacts/ContactsItem/ContactsItem.jsx","components/Contacts/ContactsList/ContactsList.jsx","redux/filter/selectors.js","components/Filter/Filter.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectIsAddingContact = state => state.contacts.isAddingContact;\nexport const selectError = state => state.contacts.error;\n","import { MutatingDots } from 'react-loader-spinner';\nimport Spinner from 'react-bootstrap/Spinner';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport const SpinnerMutatingDots = () => {\n  return (\n    <MutatingDots\n      height=\"100\"\n      width=\"100\"\n      color=\"#00aeff\"\n      secondaryColor=\"#00aeff\"\n      radius=\"12.5\"\n      ariaLabel=\"mutating-dots-loading\"\n      wrapperStyle={{}}\n      wrapperClass=\"\"\n      visible={true}\n    />\n  );\n};\n\nexport const SpinnerBorder = () => {\n  return <Spinner animation=\"border\" size=\"sm\" />;\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport toast from 'react-hot-toast';\nimport './ContactForm.css';\n\nimport {\n  selectContacts,\n  selectIsAddingContact,\n} from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nimport { SpinnerBorder } from 'components/Spinner/Spinner';\n\nexport const ContactsForm = () => {\n  const dispatch = useDispatch();\n  const isAddingContact = useSelector(selectIsAddingContact);\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const name = form.elements.name.value;\n    const number = form.elements.number.value;\n\n    if (contacts.find(contact => contact.name === name)) {\n      return toast.error(`${name} is already in the list`);\n    }\n\n    dispatch(addContact({ name, number }));\n\n    toast.success(`${name} is added to the contact list!`);\n\n    form.reset();\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} className=\"form__contaiter\">\n        <label className=\"form__label--name\">Name</label>\n        <input\n          className=\"form__input--name\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n\n        <label className=\"form__label--name\">Number</label>\n        <input\n          className=\"form__input--name\"\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n\n        <button className=\"form__btn\" type=\"submit\">\n          {isAddingContact ? <SpinnerBorder /> : 'Add contacts'}\n        </button>\n      </form>\n    </>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { deleteContact } from 'redux/contacts/operations';\n\nimport { SpinnerBorder } from 'components/Spinner/Spinner';\n\nexport const ContactsItems = ({ contact }) => {\n  const [isDeletingContact, setIsDeletingContact] = useState(false);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <li className=\"contacts__item\">\n        <b>{contact.name}:</b> {contact.number}\n        <button\n          className=\"contacts__btn\"\n          type=\"button\"\n          onClick={() => {\n            setIsDeletingContact(true);\n            dispatch(deleteContact(contact.id));\n          }}\n        >\n          {isDeletingContact ? <SpinnerBorder /> : 'Delete'}\n        </button>\n      </li>\n    </>\n  );\n};\n\nContactsItems.propTypes = {\n  contact: PropTypes.exact({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","import { useSelector } from 'react-redux';\nimport './ContactsList.css';\n\nimport { ContactsItems } from '../ContactsItem/ContactsItem';\n\nexport const ContactsList = () => {\n  const contacts = useSelector(state => {\n    return state.contacts.items.filter(contact =>\n      contact.name\n        .toLowerCase()\n        .trim()\n        .includes(state.filter.toLowerCase().trim())\n    );\n  });\n\n  return (\n    <ul className=\"contacts__list\">\n      {contacts.map(contact => (\n        <ContactsItems contact={contact} key={contact.id} />\n      ))}\n    </ul>\n  );\n};\n","export const selectFilterContacts = state => state.filter;\n","import { useDispatch, useSelector } from 'react-redux';\nimport './Filter.css';\n\nimport { filterContacts } from 'redux/filter/filterSlice';\nimport { selectFilterContacts } from 'redux/filter/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilterContacts);\n\n  const changeFilter = e => {\n    dispatch(filterContacts(e.target.value));\n  };\n\n  return (\n    <div className=\"filter__container\">\n      <p className=\"filter__text\">Find contacts by name</p>\n\n      <label>\n        <input\n          className=\"filter__input\"\n          type=\"text\"\n          value={filter}\n          onChange={changeFilter}\n        />\n      </label>\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  selectContacts,\n  selectIsLoading,\n  selectError,\n} from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport './Contacts.css';\n\nimport { SpinnerMutatingDots } from 'components/Spinner/Spinner';\nimport { ContactsForm } from 'components/Contacts/ContactsForm/ContactForm';\nimport { ContactsList } from 'components/Contacts/ContactsList/ContactsList';\nimport { Filter } from 'components/Filter/Filter';\n\nexport default function Contacts() {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className=\"phonebook-container\">\n      <h1 className=\"title\">Phonebook</h1>\n      <ContactsForm />\n      <div className=\"contacts__container\">\n        <h2 className=\"contacts__title\">Contacts</h2>\n\n        {contacts.length !== 0 && <Filter />}\n        {isLoading && !error && contacts.length === 0 && (\n          <SpinnerMutatingDots />\n        )}\n      </div>\n      <ContactsList />\n    </div>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectIsAddingContact","isAddingContact","selectError","error","SpinnerMutatingDots","height","width","color","secondaryColor","radius","ariaLabel","wrapperStyle","wrapperClass","visible","SpinnerBorder","Spinner","animation","size","ContactsForm","dispatch","useDispatch","useSelector","onSubmit","e","preventDefault","form","target","name","elements","value","number","find","contact","toast","addContact","reset","className","type","pattern","title","required","ContactsItems","useState","isDeletingContact","setIsDeletingContact","onClick","deleteContact","id","ContactsList","filter","toLowerCase","trim","includes","map","selectFilterContacts","Filter","onChange","filterContacts","Contacts","useEffect","fetchContacts","length"],"sourceRoot":""}